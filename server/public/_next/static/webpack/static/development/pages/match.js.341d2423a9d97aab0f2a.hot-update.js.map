{"version":3,"file":"static/webpack/static/development/pages/match.js.341d2423a9d97aab0f2a.hot-update.js","sources":["webpack:///./src/components/match/LastScoreboard.js"],"sourcesContent":["import { Avatar } from '../player';\nimport { withRouter } from 'next/router';\n\nconst LastScoreboard = (props) => {\n  // console.log('cmp/match/LastScoreboard props.screenInfo', props.screenInfo);\n  return (\n    <div>\n      {renderPlayersScore(props)}\n      {renderMyScore(props)}\n      <button\n        onClick={() => {\n          props.router.push('/');\n        }}\n      >\n        Back to homepage\n      </button>\n    </div>\n  );\n};\n\nconst getScoreboardByPlayerId = (results, { playerId }) => {\n  let total = 0;\n  const resultsWithTotal = results.map((g) => {\n    const keys = Object.keys(g);\n    // console.log('playerId', playerId);\n    // console.log('g', g);\n    // console.log('keys', keys);\n    const result = g[playerId];\n    total += result.score;\n    return result;\n  });\n  resultsWithTotal.push({\n    name: 'TOTAL',\n    answer: '',\n    score: total,\n  });\n  return resultsWithTotal;\n};\n\nconst renderPlayersScore = ({ game, screenInfo }) => {\n  const playerIds = Object.keys(screenInfo.results[0]);\n  const results = playerIds.map(playerId => {\n    const resultPlayer = getScoreboardByPlayerId(screenInfo.results, { playerId }); \n    const totalPlayer = resultPlayer[resultPlayer.length - 1];\n    totalPlayer.playerId = playerId;\n    return totalPlayer;\n  });\n  const sortedResults = results.sort((a, b) =>\n    b.score - a.score\n  );\n  // console.log('#renderPlayersScore RESULTS RESULTS', results);\n  \n  return (\n    <div>\n    <h2>Classement final</h2>\n    <table className=\"table table-striped\">\n      <thead>\n        <th>N°</th>\n        <th>Joueu.r.se</th>\n        <th>Points</th>\n      </thead>\n      <tbody>\n        {sortedResults.map(({ playerId, answer, score }, index) => {\n          const styles = {};\n          if (playerId === game.playerId) {\n            styles.backgroundColor = 'black';\n            styles.color = 'white';\n          }\n          return (\n            <tr key={playerId}>\n              <td style={styles}>{index + 1}</td>\n              <td style={styles}><Avatar playerId={playerId} size=\"small\" /></td>\n              <td style={styles}>{score}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  </div>\n  );\n  // const { results } = screenInfo;\n  // const playerIds = Object.keys(results);\n  // const resultsArr = playerIds.map((playerId) => {\n  //   return {\n  //     playerId,\n  //     answer: results[playerId].answer,\n  //     score: results[playerId].score,\n  //     name: results[playerId].name,\n  //   };\n  // });\n  // resultsArr.sort((a, b) => {\n  //   return b.score - a.score;\n  // });\n}\n\nconst renderMyScore = ({ game, screenInfo }) => {\n  const results = getScoreboardByPlayerId(screenInfo.results, {\n    playerId: game.playerId\n  });\n  console.log('#renderMyScore RESULTS RESULTS', results);\n  return (\n    <div>\n      <h4>Récapitulatif de mes scores</h4>\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th>Jeu</th>\n            <th>Réponse</th>\n            <th>Points</th>\n          </tr>\n        </thead>\n        <tbody>\n          {results.map(({ name, answer, score }, index) => {\n            return (\n              <tr key={index}>\n                <td>{name}</td>\n                <td>{answer}</td>\n                <td>{score}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default withRouter(LastScoreboard);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAKA;AACA;AACA;;;;A","sourceRoot":""}